"""Add highlights table, ensure users table matches model

Revision ID: 692b8c7c02f2
Revises: 
Create Date: 2025-05-07 01:13:02.087777

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '692b8c7c02f2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('friends_association',
    # sa.Column('user_id', sa.Integer(), nullable=False),
    # sa.Column('friend_id', sa.Integer(), nullable=False),
    # sa.ForeignKeyConstraint(['friend_id'], ['users.id'], ),
    # sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    # sa.PrimaryKeyConstraint('user_id', 'friend_id')
    # )
    op.create_table('highlights',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False), # Ensure user_id matches users.id type
    sa.Column('book', sa.String(), nullable=False),
    sa.Column('chapter', sa.Integer(), nullable=False),
    sa.Column('verse', sa.Integer(), nullable=False),
    sa.Column('start_offset', sa.Integer(), nullable=False),
    sa.Column('end_offset', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_highlights_book'), 'highlights', ['book'], unique=False)
    op.create_index(op.f('ix_highlights_chapter'), 'highlights', ['chapter'], unique=False)
    op.create_index(op.f('ix_highlights_id'), 'highlights', ['id'], unique=False)
    op.create_index(op.f('ix_highlights_user_id'), 'highlights', ['user_id'], unique=False)
    op.create_index(op.f('ix_highlights_verse'), 'highlights', ['verse'], unique=False)
    
    # Preserve existing tables - comment out drop operations
    # op.drop_index('idx_notes_book_chapter', table_name='notes')
    # op.drop_index('idx_notes_content_trgm', table_name='notes', postgresql_using='gin')
    # op.drop_index('idx_notes_user', table_name='notes')
    # op.drop_index('idx_notes_user_book_chapter', table_name='notes')
    # op.drop_index('notes_chapter_unique_idx', table_name='notes', postgresql_where="(note_type = 'chapter'::text)")
    # op.drop_index('notes_verse_unique_idx', table_name='notes', postgresql_where="(note_type <> 'chapter'::text)")
    # op.drop_table('notes')
    # op.drop_index('idx_friendships_friend', table_name='friendships')
    # op.drop_index('idx_friendships_status', table_name='friendships')
    # op.drop_index('idx_friendships_user', table_name='friendships')
    # op.drop_table('friendships')
    # op.drop_index('idx_bible_verses_book', table_name='bible_verses')
    # op.drop_index('idx_bible_verses_book_chapter', table_name='bible_verses')
    # op.drop_index('idx_bible_verses_book_chapter_verse', table_name='bible_verses')
    # op.drop_index('idx_bible_verses_text', table_name='bible_verses', postgresql_using='gin')
    # op.drop_table('bible_verses')
    # op.drop_index('idx_insights_book_chapter', table_name='insights')
    # op.drop_index('idx_insights_content_trgm', table_name='insights', postgresql_using='gin')
    # op.drop_index('idx_insights_user', table_name='insights')
    # op.drop_table('insights')
    
    # Minimal changes to 'users' table (if any are desired)
    # Example: Add 'online' column if it doesn't exist and is wanted
    # op.add_column('users', sa.Column('online', sa.Boolean(), nullable=True, server_default='false'))
    
    # Comment out unwanted alterations to 'users' table
    # op.alter_column('users', 'username',
    #            existing_type=sa.TEXT(),
    #            type_=sa.String(),
    #            existing_nullable=False)
    # op.drop_constraint('users_email_key', 'users', type_='unique') # Keep if exists
    # op.drop_constraint('users_username_key', 'users', type_='unique') # Keep if exists
    
    # op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False) # 'id' is PK, already indexed
    # op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True) # Keep if desired and doesn't conflict

    # op.drop_column('users', 'created_at') # Keep
    # op.drop_column('users', 'updated_at') # Keep
    # op.drop_column('users', 'email')      # Keep
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('users', sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False)) # Keep if dropped in upgrade
    # op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)) # Keep
    # op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)) # Keep
    
    # op.drop_index(op.f('ix_users_username'), table_name='users') # if created in upgrade
    # op.drop_index(op.f('ix_users_id'), table_name='users') # if created in upgrade
    
    # op.create_unique_constraint('users_username_key', 'users', ['username']) # if dropped in upgrade
    # op.create_unique_constraint('users_email_key', 'users', ['email']) # if dropped in upgrade
    
    # op.alter_column('users', 'username',
    #            existing_type=sa.String(),
    #            type_=sa.TEXT(),
    #            existing_nullable=False) # if altered in upgrade
    # op.drop_column('users', 'online') # if added in upgrade

    # Recreate other tables if they were dropped in upgrade (should be commented out)
    # op.create_table('insights', ...)
    # op.create_table('bible_verses', ...)
    # op.create_table('friendships', ...)
    # op.create_table('notes', ...)

    op.drop_index(op.f('ix_highlights_verse'), table_name='highlights')
    op.drop_index(op.f('ix_highlights_user_id'), table_name='highlights')
    op.drop_index(op.f('ix_highlights_id'), table_name='highlights')
    op.drop_index(op.f('ix_highlights_chapter'), table_name='highlights')
    op.drop_index(op.f('ix_highlights_book'), table_name='highlights')
    op.drop_table('highlights')
    # op.drop_table('friends_association') # if created in upgrade
    # ### end Alembic commands ###
